What is a difference between the == operator and .equals() method in Java?
How does the JVM handle garbage collection, and what are the different types of garbage collectors available in Java?
What is the difference between checked and unchecked exceptions in Java, and when would you use one over the other?
How does the synchronized keyword work in Java, and what are some alternatives to using it?
What is a lambda expression in Java, and how does it differ from an anonymous inner class?
What is the difference between transient and volatile variables in Java, and when would you use one over the other?
What is the purpose of the finalize() method in Java, and when is it called?
How does polymorphism work in Java, and what are some real-world examples of how it can be used?
What is the purpose of the static keyword in Java, and when would you use it?
What is the difference between an interface and an abstract class in Java, and when would you use one over the other?
What is the difference between public, protected, private, and default access modifiers in Java?
What is the difference between abstract and final classes in Java, and when would you use one over the other?
What is the difference between ArrayList and LinkedList in Java, and when would you use one over the other?
What is the hashCode() method in Java, and how is it used?
What is the difference between transient and static variables in Java?
What is a Callable interface in Java, and how is it different from a Runnable interface?
What is a ThreadLocal variable in Java, and how is it used?
What is a Comparator interface in Java, and how is it used?
What is the difference between ClassLoader.loadClass() and Class.forName() methods in Java?
What is the purpose of the System.gc() method in Java, and when is it called?
What is a Proxy class in Java, and how is it used?
What is the difference between Map.get() and Map.containsKey() methods in Java?
What is a concurrentHashMap in Java, and how is it different from a regular HashMap?
What is a Thread pool in Java, and how is it used?
What is a ThreadLocalRandom class in Java, and how is it used?
What is a CompletableFuture in Java, and how is it used?
What is the difference between throw and throws keywords in Java?
What is a Collector interface in Java, and how is it used?
What is a WeakReference in Java, and how is it used?
What is a ConcurrentSkipListMap in Java, and how is it different from a regular TreeMap?
What is the difference between Thread.sleep() and Object.wait() methods in Java?
What is the difference between Comparator and Comparable interfaces in Java?
What is a Phaser class in Java, and how is it used?
What is a StampedLock in Java, and how is it used?
What is a LockSupport class in Java, and how is it used?
What is a CompletableFuture.supplyAsync() method in Java, and how is it used?
What is the difference between Stream.filter() and Stream.map() methods in Java?
What is a CompletableFuture.thenApply() method in Java, and how is it used?
What is a CompletableFuture.join() method in Java, and how is it used?
What is a CountDownLatch in Java, and how is it used?
What is a CyclicBarrier in Java, and how is it used?
What is the ClassLoader.defineClass() method in Java, and how is it used?
What is a ReentrantReadWriteLock in Java, and how is it used?
What is a java.util.concurrent.ForkJoinPool in Java, and how is it used?
What is a Semaphore?
What is the ConcurrentHashMap.computeIfAbsent() method in Java, and how is it used?
What is a ConcurrentLinkedDeque in Java, and how is it used?
What is the difference between StringBuffer and StringBuilder in Java, and when would you use one over the other?
What is a Thread.UncaughtExceptionHandler interface in Java, and how is it used?
What is a ThreadLocalRandom.current() method in Java, and how is it used?
What is the Arrays.parallelSort() method in Java, and how is it used?
What is a CompletableFuture.thenCompose() method in Java, and how is it used?
What is a CompletableFuture.thenAccept() method in Java, and how is it used?
What is a CompletableFuture.anyOf() method in Java, and how is it used?
What is a CompletableFuture.allOf() method in Java, and how is it used?
What is a java.util.concurrent.ConcurrentHashMap.KeySetView in Java, and how is it used?
What is a ReadWriteLock in Java, and how is it used?
What is the Lock interface in Java, and how is it used?
What is a CopyOnWriteArrayList in Java, and how is it used?
What is the CopyOnWriteArraySet in Java, and how is it used?
What is the java.util.function.Predicate interface in Java, and how is it used?
What is the java.util.function.Consumer interface in Java, and how is it used?
What is the java.util.function.Supplier interface in Java, and how is it used?
What is the java.util.function.Function interface in Java, and how is it used?
What is a CompletableFuture.completeExceptionally() method in Java, and how is it used?
What is a CompletableFuture.cancel() method in Java, and how is it used?
What is the difference between Stream.forEach() and Stream.peek() methods in Java?
What is a java.util.concurrent.Exchanger in Java, and how is it used?
What is the difference between Runtime.getRuntime().availableProcessors() and java.util.concurrent.ForkJoinPool.getCommonPoolParallelism() methods in Java?
What is the Object.clone() method in Java, and how is it used?
What is the java.util.Optional class in Java, and how is it used?
What is a CompletableFuture.complete() method in Java, and how is it used?
What is the Stream.collect() method in Java, and how is it used?
What is a CompletableFuture.runAsync() method in Java, and how is it used?
What is the java.util.function.BiPredicate interface in Java, and how is it used?
What is a CompletableFuture.thenRun() method in Java, and how is it used?
What is a CompletableFuture.exceptionally() method in Java, and how is it used?
What is the java.util.function.BiConsumer interface in Java, and how is it used?
What is a CompletableFuture.thenCombine() method in Java, and how is it used?
What is a CompletableFuture.thenAcceptBoth() method in Java, and how is it used?
What is the java.lang.invoke.MethodHandle class in Java, and how is it used?
What is a java.util.concurrent.ConcurrentSkipListMap in Java, and how is it used?
What is a java.util.concurrent.PriorityBlockingQueue in Java, and how is it used?
What is the java.util.concurrent.TransferQueue interface in Java, and how is it used?
What is a java.util.concurrent.SynchronousQueue in Java, and how is it used?
What is the java.util.concurrent.LinkedTransferQueue in Java, and how is it used?
What is a java.util.concurrent.LinkedBlockingDeque in Java, and how is it used?
What is the java.lang.ThreadLocal class in Java, and how is it used?
What is the java.util.concurrent.Excecutors.newCachedThreadPool() method in Java, and how is it used?
What is the java.util.concurrent.Excecutors.newFixedThreadPool() method in Java, and how is it used?
What is the java.util.concurrent.Excecutors.newSingleThreadExecutor() method in Java, and how is it used?
What is the java.util.concurrent.Future.get() method in Java, and how is it used?
What is the java.util.concurrent.Future.isDone() method in Java, and how is it used?
What is the java.util.concurrent.Future.isCancelled() method in Java, and how is it used?
What is the java.util.concurrent.CompletionService interface in Java, and how is it used?
What is the java.util.concurrent.LinkedBlockingQueue in Java, and how is it used?
What is the java.util.concurrent.ConcurrentHashMap.computeIfPresent() method in Java, and how is it used?
What is the java.util.concurrent.Phaser class in Java, and how is it used?
What is the java.util.concurrent.CyclicBarrier class in Java, and how is it used?
What is the java.util.concurrent.CountDownLatch class in Java, and how is it used?
What is the java.util.concurrent.BrokenBarrierException class in Java, and how is it used?
What is the java.util.concurrent.TimeoutException class in Java, and how is it used?
What is the java.util.concurrent.TimeUnit enum in Java, and how is it used?
What is the java.util.concurrent.atomic.AtomicLong class in Java, and how is it used?
What is the java.util.concurrent.DelayQueue class in Java, and how is it used?
What is the java.util.concurrent.BlockingDeque interface in Java, and how is it used?
What is the java.util.concurrent.ThreadPoolExecutor class in Java, and how is it used?
What is the java.util.concurrent.LinkedBlockingQueue.take() method in Java, and how is it used?
What is the java.util.concurrent.Executors.newSingleThreadScheduledExecutor() method in Java, and how is it used?
These question are basic as well as advance and should be enough to clear Interview.

In this moment layoff are happening in Bulk so its important to keep revising and practicing.

Edit 1: Adding design patterns question

What are design patterns, and how do they help in Java programming?
Can you explain the difference between creational, structural, and behavioral design patterns in Java?
What is the Singleton pattern, and how is it implemented in Java?
Can you give an example of the Singleton pattern in Java?
What is the Factory Method pattern, and how is it used in Java?
Can you give an example of the Factory Method pattern in Java?
What is the Decorator pattern, and how is it used in Java?
Can you give an example of the Decorator pattern in Java?
What is the Adapter pattern, and how is it used in Java?
Can you give an example of the Adapter pattern in Java?
What is the Observer pattern, and how is it used in Java?
Can you give an example of the Observer pattern in Java?
What is the Strategy pattern, and how is it used in Java?
Can you give an example of the Strategy pattern in Java?
What is the Template Method pattern, and how is it used in Java?
Can you give an example of the Template Method pattern in Java?
What is the Command pattern, and how is it used in Java?
Can you give an example of the Command pattern in Java?
What is the Iterator pattern, and how is it used in Java?
Can you give an example of the Iterator pattern in Java?




----------------------------------------------------------------------
1 >> Difference between == operator and .equals() method in Java:
== operator compares object references, checking if two references point to the same object in memory. .equals() method compares object contents, checking if two objects are logically equal based on their values. The .equals() method can be overridden in a class to define custom equality logic.

2>> JVM garbage collection and different types of garbage collectors:
Garbage collection in JVM is the process of automatically reclaiming memory occupied by objects that are no longer in use. JVM has several types of garbage collectors, including Serial GC, Parallel GC, Concurrent Mark Sweep (CMS) GC, and G1 (Garbage First) GC. These collectors use different strategies and algorithms for efficiently reclaiming memory.

3>> Checked vs. unchecked exceptions in Java:
Checked exceptions are checked at compile-time and must be explicitly handled by the developer using try-catch blocks or declared with throws keyword. Unchecked exceptions are runtime exceptions and are not checked at compile time. Developers generally use checked exceptions for recoverable errors and unchecked exceptions for programming errors.

4>> synchronized keyword in Java and alternatives:
synchronized keyword in Java is used to ensure that only one thread can access a shared resource at a time. Alternatives to synchronized include using explicit locks (java.util.concurrent.locks), atomic variables (from java.util.concurrent.atomic package), or concurrent data structures (from java.util.concurrent package).

5>> Lambda expression in Java vs. anonymous inner class:
Lambda expression is a concise way to create anonymous instances of functional interfaces. It provides a shorter syntax than anonymous inner classes and does not create a new class at runtime. Anonymous inner classes, on the other hand, can implement any interface or extend any class but with more verbose syntax.

6>> Transient vs. volatile variables in Java:
transient keyword is used to mark a variable that should not be serialized. It is used with instance variables to exclude them from the serialization process. volatile keyword is used to mark a variable whose value should always be read from and written to main memory, ensuring visibility across threads. It is used for variables that can be accessed concurrently.

7 >> Purpose of finalize() method and when it is called:
finalize() method is used to perform cleanup actions before an object is garbage collected. It is called by the garbage collector when there are no more references to the object. However, its usage is discouraged since Java 9, as it can cause performance issues and unpredictable behavior.

8>> Polymorphism in Java and real-world examples:
Polymorphism is the ability of a single interface or method to support multiple types or behaviors. In Java, it is achieved through inheritance, interfaces, and method overloading. Real-world examples include a Shape class hierarchy with Circle, Rectangle, and Triangle subclasses, each implementing a common area() method with different logic.

9>> Purpose of static keyword and when to use it:
static keyword in Java is used to declare a member (variable, method, or inner class) that belongs to the class rather than instances of the class. static members can be accessed without creating an instance of the class. They are used for shared resources, utility methods, or constants.

10>> Interface vs. abstract class in Java:
Interfaces define a contract without providing any implementation, allowing multiple inheritances. Abstract classes can provide partial implementation and can have instance variables. Use an interface when you need to define a contract for multiple unrelated classes, and use an abstract class when you need to share.

Here are answers for questions 11-20.

Difference between public, protected, private, and default access modifiers in Java:
public: accessible from any class in any package.
protected: accessible from any class in the same package and subclasses in any package.
private: accessible only within the class that declares it.
default (package-private): accessible from any class in the same package.
Abstract vs. final classes in Java:
Abstract class: A class that cannot be instantiated and may contain abstract methods. It is meant to be subclassed by other classes to provide a common base for them.
Final class: A class that cannot be subclassed. It is used to prevent further modification or inheritance.
ArrayList vs. LinkedList in Java:
ArrayList: A dynamic array-based implementation of the List interface. Provides fast random access and element addition/removal at the end, but slower insertion/removal in the middle.
LinkedList: A doubly-linked list implementation of the List interface. Provides fast insertion/removal at the beginning, middle, and end but slower random access.
hashCode() method in Java:
The hashCode() method is used to calculate an integer hash code for an object. It is used in data structures like HashMap, HashSet, and Hashtable for efficient storage and retrieval. It should be overridden along with the equals() method to maintain the contract between them.

Transient vs. static variables in Java:

Transient variable: A variable that is not serialized during object serialization. Used for temporary or non-serializable fields.
Static variable: A variable that belongs to the class rather than instances of the class. Used for shared resources, constants, or utility methods.
Callable interface in Java vs. Runnable interface:
Callable: An interface that represents a task that returns a value and may throw an exception. The call() method returns a value and can throw checked exceptions.
Runnable: An interface that represents a task that does not return a value and cannot throw checked exceptions. The run() method does not return a value and can only throw unchecked exceptions.
ThreadLocal variable in Java:
A ThreadLocal variable provides a separate instance of the variable for each thread that accesses it. It is used to store thread-specific data, preventing data races and synchronization issues in concurrent programming.

Comparator interface in Java:
The Comparator interface is used to define a custom ordering for a collection of objects. It has a compare() method that takes two objects and returns a negative, zero, or positive value based on their order. It is used with sorting methods like Collections.sort() or data structures like TreeSet.

Difference between ClassLoader.loadClass() and Class.forName() methods in Java:

ClassLoader.loadClass(): Loads a class using the specified ClassLoader. It does not initialize the class.
Class.forName(): Loads and initializes a class using the current thread's context class loader. It also runs the static initializer block.
Purpose of System.gc() method and when it is called:
System.gc() is a hint to the JVM that it may be a good time to perform garbage collection. The JVM may choose to ignore the hint or perform garbage collection based on its algorithms. It is generally not recommended to call System.gc() explicitly, as modern JVMs handle garbage collection efficiently without manual intervention.

